{"version":3,"sources":["component/Book.js","component/Table.js","App.js","serviceWorker.js","index.js"],"names":["Book","_ref","ID","Title","react_default","a","createElement","Fragment","Table","finalValue","style","borderWidth","borderColor","borderStyle","border-width","data","filter","book","toLowerCase","includes","map","index","Object","assign","key","App","_useState","useState","_useState2","slicedToArray","searchKey","setSearchkey","_useState3","_useState4","setFinalValue","onSubmit","evt","preventDefault","alert","concat","type","placeholder","value","onChange","e","target","length","console","log","ifPresent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ioDAEe,SAASA,EAATC,GAA0B,IAAXC,EAAWD,EAAXC,GAAGC,EAAQF,EAARE,MAC7B,OAAQC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACJH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKH,ICFE,SAASK,EAATP,GAA4B,IAAZQ,EAAYR,EAAZQ,WAG3B,OAAQL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACRH,EAAAC,EAAAC,cAAA,SAAOI,MAAO,CACVC,YAAe,MAAOC,YAAe,UAAWC,YAAe,QAC/DC,eAAgB,WAGhBV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,mBAGAS,EAAKC,OAAO,SAAAC,GAAI,OAAIA,EAAKd,MAAMe,cAAcC,SAASV,EAAWS,iBAChEE,IAAI,SAACH,EAAMI,GAAP,OAAiBjB,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACN,EAADsB,OAAAC,OAAA,CAAMC,IAAKH,GAAWJ,SC+B5CQ,MA9Cf,WAAe,IAAAC,EAEqBC,mBAAS,IAF9BC,EAAAN,OAAAO,EAAA,EAAAP,CAAAI,EAAA,GAENI,EAFMF,EAAA,GAEKG,EAFLH,EAAA,GAAAI,EAGuBL,mBAAS,IAHhCM,EAAAX,OAAAO,EAAA,EAAAP,CAAAU,EAAA,GAGNvB,EAHMwB,EAAA,GAGMC,EAHND,EAAA,GA6Bb,OAAQ7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACNH,EAAAC,EAAAC,cAAA,QAAM6B,SAxBa,SAACC,GACpBA,EAAIC,iBACJH,EAAcJ,EAAUZ,eACxBoB,MAAK,qBAAAC,OAAsBT,MAsBzB1B,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOkC,KAAK,OACVC,YAAY,SACZC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAAaa,EAAEC,OAAOH,UAvBzB,SAACjC,GAMjB,OAJgBM,EAAKC,OAAO,SAAAC,GAAI,OAAIA,EAAKd,MAAMe,cAAcC,SAASV,EAAWS,iBAIvE4B,OAAO,GACfC,QAAQC,IAAR,qBACO,IAETD,QAAQC,IAAR,gBACQ,GAcLC,CAAUxC,GAAcL,EAAAC,EAAAC,cAACE,EAAD,CAAOC,WAAcA,GAArB,KACrBL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,iBAGTH,EAAAC,EAAAC,cAAA,SAAOkC,KAAK,SAASE,MAAM,cClCbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPpD,EAAAC,EAAAC,cAACF,EAAAC,EAAMoD,WAAP,KACErD,EAAAC,EAAAC,cAACoD,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC","file":"static/js/main.c682f74e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Book({ID,Title}) {\r\n    return (<>\r\n        <td>{ID}</td>\r\n        <td></td>\r\n        <td>{Title}</td>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport data from '../data/book.json';\r\nimport Book from '../component/Book';\r\n\r\nexport default function Table({finalValue}){\r\n\r\n\r\n    return (<>\r\n    <table style={{\r\n        \"borderWidth\": \"1px\", 'borderColor': \"#aaaaaa\", 'borderStyle': 'solid',\r\n        'border-width': 'medium'\r\n      }}>\r\n        \r\n        <tr>\r\n          <td>Id</td>\r\n          <td> </td>\r\n          <td>Name</td>\r\n        </tr>\r\n\r\n        { data.filter(book => book.Title.toLowerCase().includes(finalValue.toLowerCase()))\r\n          .map((book, index) => <tr> <Book key={index} {...book}></Book></tr>) \r\n          }\r\n\r\n      </table>\r\n    </>)\r\n} ","import React, { useState } from 'react';\n\nimport data from './data/book.json';\nimport Table from './component/Table';\n\nfunction App() {\n\n  const [searchKey, setSearchkey] = useState(\"\");\n  const [finalValue, setFinalValue] = useState(\"\");\n\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    setFinalValue(searchKey.toLowerCase());\n    alert(`Submitting search ${searchKey}`)\n  }\n\n  const ifPresent = (finalValue) => {\n   // console.log(`value = ${finalValue}`);\n    const result =  data.filter(book => book.Title.toLowerCase().includes(finalValue.toLowerCase()));\n   \n    //console.log(result);\n    \n    if(result.length>0){\n      console.log(` not empty array`);\n      return true;\n   }else{\n    console.log(`empty array`);\n     return false;\n   }\n   // console.log(`value = ${result}`);\n    //return result;\n  }\n\n  return (<>\n    <form onSubmit={handleSubmit}>\n      <h2>Book shell</h2>\n      <input type='text'\n        placeholder='Search'\n        value={searchKey}\n        onChange={e => setSearchkey(e.target.value)}\n      />\n      {ifPresent(finalValue) ? <Table finalValue = {finalValue} > </Table>\n        : <div><>No data</></div>\n      }\n            \n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}